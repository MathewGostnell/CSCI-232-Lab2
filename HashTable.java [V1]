
public class HashTable {

    private final int tableSize;
    private final boolean isRandom;
    public BinaryTree[] hashTable;

    public HashTable(int tableSize, boolean isRandom) {
        this.tableSize = tableSize;
        this.isRandom = isRandom;
        hashTable = new BinaryTree[tableSize];
        for(int i = 0; i < tableSize; i++){
            hashTable[i] = new BinaryTree();
        }
    }

    public void insert(int n) {
        // check to see if it is inserted already
        if (hashTable[getKey(n)].find(n) == null) {
            Node node = new Node(n);
            hashTable[getKey(n)].insert(node);
//        } else {  // we found that node already, so let's not insert it!
//            System.out.println("The HashTable already has that item in it!");
//        }
        }
    }

    public void showHashTable() {
        for (int i = 0; i < tableSize; i++) {
            if (hashTable[i] != null) {
                System.out.println(i + ". ");
                hashTable[i].traverse(1);
                // the 1 in traverse() is for preOrder traversal
            }
        }
    }

    public void find(int n) {
        hashTable[getKey(n)].find(n);
    }

    public int getKey(int n) {
        return n % tableSize;
    }

    public boolean isRandom() {
        if (isRandom) {
            return true;
        } else {
            return false;
        }
    }

}
